#ifndef GPIO_ANALOG_H
#define GPIO_ANALOG_H

#define GPIO_ADC_PRESCALER_2    (GPIO_BIT(ADPS0))
#define GPIO_ADC_PRESCALER_4    (GPIO_BIT(ADPS1))
#define GPIO_ADC_PRESCALER_8    (GPIO_BIT(ADPS1) | GPIO_BIT(ADPS0))
#define GPIO_ADC_PRESCALER_16   (GPIO_BIT(ADPS2))
#define GPIO_ADC_PRESCALER_32   (GPIO_ADC_PRESCALER_16 | GPIO_BIT(ADPS0))
#define GPIO_ADC_PRESCALER_64   (GPIO_ADC_PRESCALER_16 | GPIO_ADC_PRESCALER_4)
#define GPIO_ADC_PRESCALER_128  (GPIO_ADC_PRESCALER_64 | GPIO_ADC_PRESCALER_2)

#define GPIO_ADC_SET_PRESCALER(PRESCALER) (ADCSRA |= PRESCALER)

#define GPIO_ADC_START() GPIO_SET_BIT(ADCSRA, ADEN)

#define GPIO_ADC_STOP()  GPIO_CLEAR_BIT(ADCSRA, ADEN)

#define GPIO_ADC_INIT() { \
    GPIO_SET_BIT(ADMUX, REFS0);\
    GPIO_ADC_START();\
    GPIO_ADC_SET_PRESCALER(GPIO_ADC_PRESCALER_128);\
}

#define GPIO_ANALOG_PIN_INPUT(pin) {\
    GPIO_SET(ADMUX, (ADMUX & 0xF0)  | (pin & 0x0F));\
    GPIO_ADC_INIT();\
}
  
static inline 
uint16_t AnalogRead(const uint8_t analog_pin){
    GPIO_SET_BIT(ADCSRA, ADSC);
    while(ADCSRA & GPIO_BIT(ADSC));
    return ADC;
}

#endif